#include <iostream>
#include <unistd.h>
#include <pthread.h>
using namespace std;

static pthread_mutex_t lock;
static gcounter<>* that = NULL;
template <typename V=int, typename K=string>

static void *gregory(void *data) {
	cout << "Gregory is called " << endl;
	that = (gcounter<>*)data;
	for(;;) {
		//wait on mutex
		//acquire mutex
		//check the value of counter
		//if the value of counter is 10, reset it to 5
		//release mutex
		pthread_mutex_lock(&lock);
		cout << "checking val " << that->local() << endl;
		if (that->local() == 5) {
			cout << "about to inc by -5!!! " << endl;
			that->inc(-10);	
			//return NULL;	
		}
		pthread_mutex_unlock(&lock);
		sleep(1);
	}
	return NULL;	
}

aspect Counter {
	advice execution("void * constructCounter(const char*)") && args(val): after(const char * val) {
		cout << "The Aspect knows that gcounter " << val << " is created " << endl;
 		if (pthread_mutex_init(&lock, NULL) != 0) {
        		cout << "\n mutex init has failed\n";
        		exit(1);
    		}	
		gcounter<> * result = (gcounter<>*)(*tjp->result()); 
		pthread_t th;
		int err = pthread_create(&th, NULL, gregory, result);	
		if (err != 0) {
			cout << "Gregory cannot be created" << endl;
		}
		sleep(1);	
	}
	
	advice execution("void counterInc(void*)") : after() {
		cout << "Aspect knows that the gcounter was incremented " << endl;
		pthread_mutex_lock(&lock);
		cout << "the incremented value of gcounter: " << that->local() << endl;
		pthread_mutex_unlock(&lock);
		sleep(1);
	}

	advice execution("void counterIncVal(void*, int)") && args(v, val) : after(void* v, int val) {
		cout << "Aspect knows that the gcounter was incremented to " << val << endl;
		pthread_mutex_lock(&lock);
		cout << "the incremented value of gcounter: " << that->local() << endl;
		pthread_mutex_unlock(&lock);
		sleep(1);
	}
};